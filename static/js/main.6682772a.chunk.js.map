{"version":3,"sources":["components/Pagination/Pagination.tsx","App.tsx","utils.ts","index.tsx"],"names":["numberArray","num","arrayNum","i","push","Pagination","total","currentPage","perPage","onPageChange","className","cn","disabled","href","onClick","map","index","active","items","from","to","numbers","n","getNumbers","App","useState","page","setPage","itemQuantity","setPerPage","totalPages","Math","ceil","length","handleChange","newPage","newPerPage","useEffect","newParams","URLSearchParams","set","String","window","history","replaceState","min","id","onChange","e","Number","target","value","option","htmlFor","slice","item","ReactDOM","render","document","getElementById"],"mappings":"oNAYMA,EAAwB,SAACC,GAG7B,IAFA,IAAMC,EAAW,GAERC,EAAI,EAAGA,EAAIF,EAAKE,GAAK,EAC5BD,EAASE,KAAKD,GAGhB,OAAOD,GAGIG,EAA8B,SAAC,GAKrC,IAJLC,EAII,EAJJA,MACAC,EAGI,EAHJA,YACAC,EAEI,EAFJA,QACAC,EACI,EADJA,aAEA,OACE,qBAAIC,UAAU,aAAd,UACE,oBAAIA,UAAWC,IAAG,YAAa,CAAEC,SAA0B,IAAhBL,IAA3C,SACE,mBACE,UAAQ,WACRG,UAAU,YACVG,KAAK,QACL,gBAA+B,IAAhBN,EACfO,QAAS,kBACPP,EAAc,GAAKE,EAAaF,EAAc,EAAGC,IANrD,oBAYDR,EAAYM,GAAOS,KAAI,SAACd,EAAae,GAAd,OACtB,oBAEEN,UAAWC,IAAG,YAAa,CAAEM,OAAQV,IAAgBS,EAAQ,IAF/D,SAIE,mBACE,UAAQ,WACRN,UAAU,YACVG,KAAI,WAAMG,EAAQ,GAClBF,QAAS,kBAAML,EAAaO,EAAQ,EAAGR,IAJzC,SAMGQ,EAAQ,KATNf,MAaT,oBAAIS,UAAWC,IAAG,YAAa,CAAEC,SAAUL,IAAgBD,IAA3D,SACE,mBACE,UAAQ,WACRI,UAAU,YACVG,KAAK,QACL,gBAAeN,IAAgBD,EAC/BQ,QAAS,kBACPP,EAAcD,GAASG,EAAaF,EAAc,EAAGC,IANzD,wBCnDFU,ECRC,SAAoBC,EAAcC,GAGvC,IAFA,IAAMC,EAAU,GAEPC,EAAIH,EAAMG,GAAKF,EAAIE,GAAK,EAC/BD,EAAQjB,KAAKkB,GAGf,OAAOD,EDCKE,CAAW,EAAG,IAAIR,KAAI,SAACO,GAAD,qBAAeA,MAEtCE,EAAgB,WAC3B,MAAwBC,mBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACMC,EAAe,CAAC,EAAG,EAAG,GAAI,IAChC,EAA8BH,mBAASG,EAAa,IAApD,mBAAOpB,EAAP,KAAgBqB,EAAhB,KAEMC,EAAaC,KAAKC,KAAKd,EAAMe,OAASzB,GAEtC0B,EAA6B,SAACC,EAASC,GAC3CT,EAAQQ,GACRN,EAAWO,IAWb,OARAC,qBAAU,WACR,IAAMC,EAAY,IAAIC,gBAEtBD,EAAUE,IAAI,OAAQC,OAAOf,IAC7BY,EAAUE,IAAI,UAAWC,OAAOjC,IAChCkC,OAAOC,QAAQC,aAAa,GAAI,GAAhC,WAAwCN,MACvC,CAACZ,EAAMlB,IAGR,sBAAKE,UAAU,YAAf,UACE,uDAEA,mBAAGA,UAAU,OAAO,UAAQ,OAA5B,wBACWgB,EADX,mBAC0BlB,EAAUkB,EAAOlB,EAAU,EADrD,cAC4DuB,KAAKc,IAAIrC,EAAUkB,EAAMR,EAAMe,QAD3F,eACyGf,EAAMe,OAD/G,OAIA,sBAAKvB,UAAU,iBAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,wBACE,UAAQ,kBACRoC,GAAG,kBACHpC,UAAU,eACVqC,SAAU,SAACC,GAAD,OAAOd,EAAa,EAAGe,OAAOD,EAAEE,OAAOC,SACjDA,MAAO3C,EALT,SAOGoB,EAAab,KAAI,SAACqC,GAAD,OAChB,wBAAqBD,MAAOC,EAA5B,SACGA,GADUA,UAOnB,uBAAOC,QAAQ,kBAAkB3C,UAAU,qBAA3C,+BAKF,cAAC,EAAD,CACEJ,MAAOwB,EACPvB,YAAamB,EACblB,QAASA,EACTC,aAAcyB,IAGhB,6BACGhB,EAAMoC,OAAO5B,EAAO,GAAKlB,EAASkB,EAAOlB,GAASO,KAAI,SAACwC,GAAD,OACrD,oBAAe,UAAQ,OAAvB,SACGA,GADMA,YElEnBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.6682772a.chunk.js","sourcesContent":["import React from \"react\";\nimport cn from \"classnames\";\n\ninterface Props {\n  total: number;\n  currentPage: number;\n  perPage: number;\n  onPageChange: (newPage: number, newPerPage: number) => void;\n}\n\ntype NumArray = (num: number) => number[];\n\nconst numberArray: NumArray = (num) => {\n  const arrayNum = [];\n\n  for (let i = 0; i < num; i += 1) {\n    arrayNum.push(i);\n  }\n\n  return arrayNum;\n};\n\nexport const Pagination: React.FC<Props> = ({\n  total,\n  currentPage,\n  perPage,\n  onPageChange,\n}) => {\n  return (\n    <ul className=\"pagination\">\n      <li className={cn(\"page-item\", { disabled: currentPage === 1 })}>\n        <a\n          data-cy=\"prevLink\"\n          className=\"page-link\"\n          href=\"#prev\"\n          aria-disabled={currentPage === 1}\n          onClick={() =>\n            currentPage > 1 && onPageChange(currentPage - 1, perPage)\n          }\n        >\n          «\n        </a>\n      </li>\n      {numberArray(total).map((num: number, index: number) => (\n        <li\n          key={num}\n          className={cn(\"page-item\", { active: currentPage === index + 1 })}\n        >\n          <a\n            data-cy=\"pageLink\"\n            className=\"page-link\"\n            href={`#${index + 1}`}\n            onClick={() => onPageChange(index + 1, perPage)}\n          >\n            {index + 1}\n          </a>\n        </li>\n      ))}\n      <li className={cn(\"page-item\", { disabled: currentPage === total })}>\n        <a\n          data-cy=\"nextLink\"\n          className=\"page-link\"\n          href=\"#next\"\n          aria-disabled={currentPage === total}\n          onClick={() =>\n            currentPage < total && onPageChange(currentPage + 1, perPage)\n          }\n        >\n          »\n        </a>\n      </li>\n    </ul>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\n\nimport \"./App.css\";\nimport { getNumbers } from \"./utils\";\nimport { Pagination } from \"./components/Pagination\";\n\ntype HandleChange = (newPage: number, newPerPage: number) => void;\n\nconst items = getNumbers(1, 42).map((n) => `Item ${n}`);\n\nexport const App: React.FC = () => {\n  const [page, setPage] = useState(1);\n  const itemQuantity = [3, 5, 10, 20];\n  const [perPage, setPerPage] = useState(itemQuantity[1]);\n\n  const totalPages = Math.ceil(items.length / perPage);\n\n  const handleChange: HandleChange = (newPage, newPerPage) => {\n    setPage(newPage);\n    setPerPage(newPerPage);\n  };\n\n  useEffect(() => {\n    const newParams = new URLSearchParams();\n\n    newParams.set(\"page\", String(page));\n    newParams.set(\"perPage\", String(perPage));\n    window.history.replaceState({}, \"\", `?${newParams}`);\n  }, [page, perPage]);\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${page} (items ${perPage * page - perPage + 1} - ${Math.min(perPage * page, items.length)} of ${items.length})`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            onChange={(e) => handleChange(1, Number(e.target.value))}\n            value={perPage}\n          >\n            {itemQuantity.map((option) => (\n              <option key={option} value={option}>\n                {option}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n\n      <Pagination\n        total={totalPages}\n        currentPage={page}\n        perPage={perPage}\n        onPageChange={handleChange}\n      />\n\n      <ul>\n        {items.slice((page - 1) * perPage, page * perPage).map((item) => (\n          <li key={item} data-cy=\"item\">\n            {item}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n","export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}